<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddOption" xml:space="preserve">
    <value>Add Option (Button)</value>
  </data>
  <data name="ButtonBackgroundColorLabel" xml:space="preserve">
    <value>Button Background Color</value>
  </data>
  <data name="ButtonColorLabel" xml:space="preserve">
    <value>Button Color</value>
  </data>
  <data name="ButtonPreview" xml:space="preserve">
    <value>Button Preview</value>
  </data>
  <data name="ButtonsHelp" xml:space="preserve">
    <value>These are the buttons your users will see on mobile applications and the website.</value>
  </data>
  <data name="ButtonText" xml:space="preserve">
    <value>Button Text</value>
  </data>
  <data name="ButtonTextColorLabel" xml:space="preserve">
    <value>Button Text Color</value>
  </data>
  <data name="ButtonTextLabel" xml:space="preserve">
    <value>Button Text</value>
  </data>
  <data name="Calls" xml:space="preserve">
    <value>Calls</value>
  </data>
  <data name="CallsAndStations" xml:space="preserve">
    <value>Calls and Stations</value>
  </data>
  <data name="ChangesWarning" xml:space="preserve">
    <value>Changes to custom statues can take up to 30 minutes to fully propagate though the Resgrid network. Mobile app users are encouraged to manually resync (Settings-&gt;Advanced Settings-&gt;ReSync).</value>
  </data>
  <data name="CurrentPersonnelStatusesHeader" xml:space="preserve">
    <value>Custom Personnel Statuses (Actions)</value>
  </data>
  <data name="CurrentUnitStatusesHeader" xml:space="preserve">
    <value>Current Unit Statuses</value>
  </data>
  <data name="CustomPersonnelStaffingLevelsHeader" xml:space="preserve">
    <value>Custom Personnel Staffing Levels</value>
  </data>
  <data name="CustomStatusDescPlaceholder" xml:space="preserve">
    <value>A description of the custom statuses.</value>
  </data>
  <data name="CustomStatusesHeader" xml:space="preserve">
    <value>Custom Statuses</value>
  </data>
  <data name="CustomStatusNamePlaceholder" xml:space="preserve">
    <value>Custom Statuses Set Name (i.e. 'My Custom Statuses')</value>
  </data>
  <data name="DefaultPersonnelActions" xml:space="preserve">
    <value>Default Personnel Actions/Statuses</value>
  </data>
  <data name="DefaultPersonnelStaffing" xml:space="preserve">
    <value>Default Personnel Staffing</value>
  </data>
  <data name="DeleteCustomStatusWarning" xml:space="preserve">
    <value>WARNING: This will permanently delete this status set and your buttons will revert back to the defaults for this unit type. Are you sure you want to delete this status set?</value>
  </data>
  <data name="DetailTypeLabel" xml:space="preserve">
    <value>Detail Type</value>
  </data>
  <data name="EditCustomStateDetailHeader" xml:space="preserve">
    <value>Edit Custom State Detail</value>
  </data>
  <data name="EditEntryHeader" xml:space="preserve">
    <value>Edit Custom Statuses</value>
  </data>
  <data name="EditingSet" xml:space="preserve">
    <value>Editing Set</value>
  </data>
  <data name="EditPersonnelStatuses" xml:space="preserve">
    <value>Edit Personnel Statuses</value>
  </data>
  <data name="EditStaffingLevels" xml:space="preserve">
    <value>Edit Staffing Levels</value>
  </data>
  <data name="NewCustomStatusesHeader" xml:space="preserve">
    <value>New Custom Statuses</value>
  </data>
  <data name="NewOptionHeader" xml:space="preserve">
    <value>New Option</value>
  </data>
  <data name="NoDetail" xml:space="preserve">
    <value>No Detail</value>
  </data>
  <data name="NoNote" xml:space="preserve">
    <value>No Note</value>
  </data>
  <data name="NoteTypeLabel" xml:space="preserve">
    <value>Note Type</value>
  </data>
  <data name="PersonnelActions" xml:space="preserve">
    <value>Personnel Actions</value>
  </data>
  <data name="PersonnelStaffing" xml:space="preserve">
    <value>Personnel Staffing</value>
  </data>
  <data name="PersonnelStatusesLabel" xml:space="preserve">
    <value>Personnel Statuses</value>
  </data>
  <data name="PreviewButton" xml:space="preserve">
    <value>Preview Button</value>
  </data>
  <data name="RequireGPSLabel" xml:space="preserve">
    <value>Require GPS</value>
  </data>
  <data name="SetCustomStaffingLevels" xml:space="preserve">
    <value>Set Custom Staffing Levels</value>
  </data>
  <data name="SetCustomStatuses" xml:space="preserve">
    <value>Set Custom Statuses</value>
  </data>
  <data name="StaffingLevelsLabel" xml:space="preserve">
    <value>Staffing Levels</value>
  </data>
  <data name="Stations" xml:space="preserve">
    <value>Stations</value>
  </data>
  <data name="TextColorLabel" xml:space="preserve">
    <value>Text Color</value>
  </data>
  <data name="UnitStatus" xml:space="preserve">
    <value>Unit Status</value>
  </data>
</root>