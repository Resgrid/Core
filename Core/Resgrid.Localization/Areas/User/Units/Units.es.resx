<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddLog" xml:space="preserve">
    <value>Agregar registro</value>
  </data>
  <data name="AddRole" xml:space="preserve">
    <value>Agregar rol</value>
  </data>
  <data name="AddUnitLogHeader" xml:space="preserve">
    <value>Agregar registro de unidades</value>
  </data>
  <data name="AreYouSure" xml:space="preserve">
    <value>¿Estás seguro de que quieres eliminar permanentemente todos los estados para esta unidad?</value>
  </data>
  <data name="ClearAllStatuses" xml:space="preserve">
    <value>Borrar todos los estados para la unidad</value>
  </data>
  <data name="DeleteAll" xml:space="preserve">
    <value>Eliminar todos</value>
  </data>
  <data name="DeleteUnitWarning" xml:space="preserve">
    <value>ADVERTENCIA: Esto eliminará permanentemente esta unidad. ¿Estás seguro de que quieres eliminar la unidad?</value>
  </data>
  <data name="EditUnitHeader" xml:space="preserve">
    <value>Unidad de edición</value>
  </data>
  <data name="EventsFor" xml:space="preserve">
    <value>Eventos para</value>
  </data>
  <data name="GenerateReport" xml:space="preserve">
    <value>Generar informe</value>
  </data>
  <data name="LogBodyLabel" xml:space="preserve">
    <value>Cuerpo de registro (narrativa)</value>
  </data>
  <data name="LogBodyPlaceholder" xml:space="preserve">
    <value>Una narrativa para el registro de la unidad</value>
  </data>
  <data name="Logs" xml:space="preserve">
    <value>Registro</value>
  </data>
  <data name="NewUnitHeader" xml:space="preserve">
    <value>Nueva unidad</value>
  </data>
  <data name="NotOccupied" xml:space="preserve">
    <value>Desocupado</value>
  </data>
  <data name="NoUnGroupedUnits" xml:space="preserve">
    <value>No hay unidades no agrupadas</value>
  </data>
  <data name="NoUnitsInDepartment" xml:space="preserve">
    <value>No hay unidades en el departamento</value>
  </data>
  <data name="NoUnitsInThisGroup" xml:space="preserve">
    <value>No hay unidades en este grupo</value>
  </data>
  <data name="RemoveThisRole" xml:space="preserve">
    <value>Eliminar este papel</value>
  </data>
  <data name="RoleName" xml:space="preserve">
    <value>Nombre de rol</value>
  </data>
  <data name="RoleNameHeader" xml:space="preserve">
    <value>Nombre de rol</value>
  </data>
  <data name="SelectUnit" xml:space="preserve">
    <value>Unidad de selección</value>
  </data>
  <data name="SetMultipleUnitStatusHeader" xml:space="preserve">
    <value>Establecer el estado de las unidades</value>
  </data>
  <data name="SetStatus" xml:space="preserve">
    <value>Establecer el estado</value>
  </data>
  <data name="SetStatusForSelectedUnits" xml:space="preserve">
    <value>Estado establecido para unidades seleccionadas</value>
  </data>
  <data name="SetUnitStatusHeader" xml:space="preserve">
    <value>Establecer el estado de la unidad</value>
  </data>
  <data name="UnitsListStateWarning" xml:space="preserve">
    <value>Ha seleccionado una unidad, solo se pueden seleccionar otras unidades con los mismos estados personalizados (o predeterminados).</value>
  </data>
  <data name="UnitStaffing" xml:space="preserve">
    <value>Personal de la unidad</value>
  </data>
  <data name="UnitStaffingHeader" xml:space="preserve">
    <value>Personal de la unidad</value>
  </data>
  <data name="ViewEvents" xml:space="preserve">
    <value>Ver eventos</value>
  </data>
  <data name="ViewUnitEventsHeader" xml:space="preserve">
    <value>Ver eventos de la unidad</value>
  </data>
  <data name="ViewUnitLogsHeader" xml:space="preserve">
    <value>Ver registros de unidades</value>
  </data>
  <data name="YesImSure" xml:space="preserve">
    <value>Sí estoy seguro</value>
  </data>
  <data name="YouCanAddType1" xml:space="preserve">
    <value>Puedes agregar un nuevo tipo</value>
  </data>
  <data name="YouCanAddType2" xml:space="preserve">
    <value>aquí</value>
  </data>
</root>