@using Resgrid.Model
@using Resgrid.Web.Helpers
@model Resgrid.Web.Areas.User.Models.Units.UnitsIndexView
@inject IStringLocalizer<Resgrid.Localization.Areas.User.Units.Units> localizer
@{
    ViewBag.Title = "Resgrid | " + @commonLocalizer["UnitsModule"];
}

<style>
    .k-grid-content {
        padding-bottom: 300px;
    }

    .multi-level {
        z-index: 9999999999 !important;
        overflow: visible !important;
    }

    .dropdown-submenu {
        position: relative;
        z-index: 9999999999 !important;
        overflow: visible !important;
    }

        .dropdown-submenu > .dropdown-menu {
            top: 0;
            left: 100%;
            margin-top: -6px;
            margin-left: -1px;
            -webkit-border-radius: 0 6px 6px 6px;
            -moz-border-radius: 0 6px 6px;
            border-radius: 0 6px 6px 6px;
            z-index: 9999999999 !important;
            overflow: visible !important;
        }

        .dropdown-submenu:hover > .dropdown-menu {
            display: block;
        }

        .dropdown-submenu > a:after {
            display: block;
            content: " ";
            float: right;
            width: 0;
            height: 0;
            border-color: transparent;
            border-style: solid;
            border-width: 5px 0 5px 5px;
            border-left-color: #ccc;
            margin-top: 5px;
            margin-right: -10px;
            position: relative;
            z-index: 9999999999 !important;
            overflow: visible !important;
        }

        .dropdown-submenu:hover > a:after {
            border-left-color: #fff;
        }

        .dropdown-submenu.pull-left {
            float: none;
        }

            .dropdown-submenu.pull-left > .dropdown-menu {
                left: -100%;
                margin-left: 10px;
                -webkit-border-radius: 6px 0 6px 6px;
                -moz-border-radius: 6px 0 6px 6px;
                border-radius: 6px 0 6px 6px;
                z-index: 9999999999 !important;
                overflow: visible !important;
            }
</style>

<div class="row wrapper border-bottom white-bg page-heading">
    <div class="col-sm-4">
        <h2>@commonLocalizer["UnitsModule"]</h2>
        <ol class="breadcrumb">
            <li>
                <a asp-controller="Home" asp-action="Dashboard" asp-route-area="User">@commonLocalizer["HomeModule"]</a>
            </li>
            <li class="active">
                <strong>@commonLocalizer["UnitsModule"]</strong>
            </li>
        </ol>
    </div>
    @if (ClaimsAuthorizationHelper.IsUserDepartmentAdmin() && Model.CanUserAddUnit)
    {
        <div class="col-sm-8">
            <div class="btn-group top-page-buttons" style="float:right;padding-right:15px;">
                <a title="Add a new unit" class="btn btn-success" asp-controller="Units" asp-action="NewUnit" asp-route-area="User">New Unit</a>
                <a id="shiftDayStaffingButton" class="btn btn-info top-button" title="@localizer["UnitStaffing"]" asp-controller="Units" asp-action="UnitStaffing" asp-route-area="User">@localizer["UnitStaffing"]</a>
            </div>
        </div>
    }
    else if (Model.IsUserAdminOrGroupAdmin)
    {
        <div class="col-sm-8">
            <div class="btn-group top-page-buttons" style="float:right;padding-right:15px;">
                <a id="shiftDayStaffingButton" class="btn btn-info top-button" title="@localizer["UnitStaffing"]" asp-controller="Units" asp-action="UnitStaffing" asp-route-area="User">@localizer["UnitStaffing"]</a>
            </div>
        </div>
    }
</div>

<div class="row">
    <div class="col-lg-3">
        <div class="wrapper wrapper-content">
            <div class="ibox float-e-margins">
                <div class="ibox-content mailbox-content">
                    <div>
                        <div id="tree"></div>
                        <div class="clearfix"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-lg-9">
        <div class="wrapper wrapper-content">
            <div class="ibox float-e-margins">
                <div class="ibox-content">
                    @{
                        if (Model.Units != null && Model.Units.Any())
                        {
                            @Html.Raw("<div id='unitsTab-1' class='unitTabPannel'>")
                            @Html.Raw($"<div class='table-responsive'><table class='table table-striped' data-page-length='100' width='100%'><thead><tr><th class='span1'></th><th>{@commonLocalizer["Name"]}</th><th>{@commonLocalizer["Type"]}</th><th>{@commonLocalizer["Status"]}</th><th>{@commonLocalizer["Timestamp"]}</th><th data-searchable='false' data-orderable='false'>{@localizer["SetStatus"]}</th><th data-searchable='false' data-orderable='false'></th></tr></thead><tbody id='unitGroups_0'>")

                            foreach (var u in Model.Units)
                            {
                                var unitStatus = Model.States.FirstOrDefault(x => x.UnitId == u.UnitId);
                                var stateText = "Unknown";
                                var stateColor = "#000000";
                                var stateTextColor = "#FFFFFF";

                                if (unitStatus != null)
                                {
                                    var state = await CustomStatesHelper.GetCustomUnitState(unitStatus);

                                    if (state != null)
                                    {
                                        stateText = state.ButtonText;
                                        stateColor = state.ButtonColor;
                                        stateTextColor = state.TextColor;
                                    }
                                }


                                var customState = 1;
                                if (Model.UnitCustomStates.ContainsKey(u.UnitId))
                                {
                                    customState = Model.UnitCustomStates[u.UnitId].CustomStateId;
                                }


                                UnitTableButtonTemplate(u, customState, stateTextColor, stateColor, stateText, unitStatus);

                                @Html.Raw("</td>")
                                @Html.Raw("</tr>")

                            }
                            @Html.Raw("</tbody></table></div></div>")
                        }
                        else
                        {
                            @Html.Raw($"<div style='text-align:center;'><h3>{@localizer["NoUnitsInDepartment"]}</h3></div>")
                        }
                    }

                    @{
                        var count2 = 0;

                        var ungroupedUnits2 = Model.Units.Where(x => x.StationGroupId == null);
                        if (ungroupedUnits2 != null && ungroupedUnits2.Any())
                        {
                            @Html.Raw("<div id='unitsTab0' class='unitTabPannel' style='display: none;'>")

                            @Html.Raw($"<div class='table-responsive'><table class='table table-striped' data-page-length='100' width='100%'><thead><tr><th class='span1'></th><th>{@commonLocalizer["Name"]}</th><th>{@commonLocalizer["Type"]}</th><th>{@commonLocalizer["Status"]}</th><th>{@commonLocalizer["Timestamp"]}</th><th data-searchable='false' data-orderable='false'>{@localizer["SetStatus"]}</th><th data-searchable='false' data-orderable='false'></th></tr></thead><tbody id='unitGroups_0'>")


                            if (ungroupedUnits2 != null && ungroupedUnits2.Any())
                            {
                                foreach (var u in ungroupedUnits2)
                                {
                                    var unitStatus = Model.States.FirstOrDefault(x => x.UnitId == u.UnitId);
                                    var stateText = "Unknown";
                                    var stateColor = "#000000";
                                    var stateTextColor = "#FFFFFF";

                                    if (unitStatus != null)
                                    {
                                        var state = await CustomStatesHelper.GetCustomUnitState(unitStatus);

                                        if (state != null)
                                        {
                                            stateText = state.ButtonText;
                                            stateColor = state.ButtonColor;
                                            stateTextColor = state.TextColor;
                                        }
                                    }


                                    var customState = 1;
                                    if (Model.UnitCustomStates.ContainsKey(u.UnitId))
                                    {
                                        customState = Model.UnitCustomStates[u.UnitId].CustomStateId;
                                    }


                                    UnitTableButtonTemplate(u, customState, stateTextColor, stateColor, stateText, unitStatus);

                                    @Html.Raw("</td>")
                                    @Html.Raw("</tr>")

                                }
                            }
                            @Html.Raw("</tbody></table></div></div>")

                            count2++;
                        }
                        else
                        {
                            @Html.Raw($"<div style='text-align:center;'><h3>{@localizer["NoUnGroupedUnits"]}</h3></div>")
                        }
                    }

                    @{
                        for (var i = 0; i < Model.Groups.Count(); i++)
                        {
                            var groupUnits = Model.Units.Where(x => x.StationGroupId == Model.Groups[i].DepartmentGroupId).ToList();

                            if (Model.Groups[i].Children != null && Model.Groups[i].Children.Any())
                            {
                                foreach (var childGroup in Model.Groups[i].Children)
                                {
                                    groupUnits.AddRange(Model.Units.Where(x => x.StationGroupId == childGroup.DepartmentGroupId).ToList());
                                }
                            }

                            if (groupUnits != null && groupUnits.Any())
                            {
                                @Html.Raw("<div id='unitsTab" + Model.Groups[i].DepartmentGroupId + "' class='unitTabPannel' style='display: none;'>")

                                @Html.Raw($"<div class='table-responsive'><table class='table table-striped' data-page-length='100' width='100%'><thead><tr><th class='span1'></th><th>{@commonLocalizer["Name"]}</th><th>{@commonLocalizer["Type"]}</th><th>{@commonLocalizer["Status"]}</th><th>{@commonLocalizer["Timestamp"]}</th><th data-searchable='false' data-orderable='false'>{@localizer["SetStatus"]}</th><th data-searchable='false' data-orderable='false'></th></tr></thead><tbody id='unitGroups_" + Model.Groups[i].DepartmentGroupId + "'>")
                                ;

                                if (groupUnits != null && groupUnits.Any())
                                {
                                    foreach (var u in groupUnits)
                                    {
                                        var unitStatus = Model.States.FirstOrDefault(x => x.UnitId == u.UnitId);
                                        var stateText = "Unknown";
                                        var stateColor = "#000000";
                                        var stateTextColor = "#FFFFFF";

                                        if (unitStatus != null)
                                        {
                                            var state = await CustomStatesHelper.GetCustomUnitState(unitStatus);

                                            if (state != null)
                                            {
                                                stateText = state.ButtonText;
                                                stateColor = state.ButtonColor;
                                                stateTextColor = state.TextColor;
                                            }
                                        }


                                        var customState = 1;
                                        if (Model.UnitCustomStates.ContainsKey(u.UnitId))
                                        {
                                            customState = Model.UnitCustomStates[u.UnitId].CustomStateId;
                                        }


                                        UnitTableButtonTemplate(u, customState, stateTextColor, stateColor, stateText, unitStatus);

                                        @Html.Raw("</td>")
                                        @Html.Raw("</tr>")
                                    }
                                }
                                @Html.Raw("</tbody></table></div></div>")

                                count2++;
                            }
                            else
                            {
                                @Html.Raw("<div id='unitsTab" + Model.Groups[i].DepartmentGroupId + "' class='unitTabPannel' style='display: none;'>")
                                @Html.Raw($"<div style='text-align:center;'><h3>{@localizer["NoUnitsInThisGroup"]}</h3></div>")
                                @Html.Raw("</div>")
                            }
                        }
                    }


                    <div id="multiSelectUnits" style="display: none;">

                        <div class="row">
                            <div class="col-xs-6">
                                <button class='btn btn-xs btn-primary' data-toggle='modal' data-target='#setSelectedUnitStatusModal' data-id='{u.UnitId}' data-customStateId='{customState}'>@localizer["SetStatusForSelectedUnits"]</button>
                            </div>
                            <div class="col-xs-6">
                                <div class="alert alert-warning">
                                    @localizer["UnitsListStateWarning"]
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" id="setUnitStatusModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">@localizer["SetUnitStatusHeader"]</h4>
            </div>
            <input type="hidden" id="setUnitStateUnitId" />
            <input type="hidden" id="setUnitStateCustomStateId" />
            <div class="modal-body">
                <div class="form-group">
                    <label class=" control-label">
                        @commonLocalizer["Status"]
                    </label>
                    <div class="controls">
                        <select name="UnitStatusDropdown" id="UnitStatusDropdown"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">
                        @commonLocalizer["Destination"]
                    </label>
                    <div class="controls">
                        <select name="UnitStatusDestinationDropdown" id="UnitStatusDestinationDropdown"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">
                        @commonLocalizer["Note"]
                    </label>
                    <div class="controls">
                        <input type="text" style="width: 90%;" name="UnitStatusNote" id="UnitStatusNote" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal" aria-hidden="true">
                    @commonLocalizer["Close"]
                </button>
                <button id="savingUnitStatusButton" type="button" class="btn btn-primary" name="savingUnitStatusButton">
                    @commonLocalizer["Save"]
                </button>
                <button id="savingUnitStatusButtonLoader" name="savingUnitStatusButtonLoader" class="btn btn-primary" type="button" disabled style="display: none;">
                    <div class="sk-spinner sk-spinner-wave" style="height: 20px;">
                        <div class="sk-rect1"></div>
                        <div class="sk-rect2"></div>
                        <div class="sk-rect3"></div>
                    </div>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true" id="setSelectedUnitStatusModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                <h4 class="modal-title">@localizer["SetStatusForSelectedUnits"]</h4>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label class=" control-label">
                        @commonLocalizer["Status"]
                    </label>
                    <div class="controls">
                        <select name="SelectedUnitStatusDropdown" id="SelectedUnitStatusDropdown"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">
                        @commonLocalizer["Destination"]
                    </label>
                    <div class="controls">
                        <select name="SelectedUnitStatusDestinationDropdown" id="SelectedUnitStatusDestinationDropdown"></select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="control-label">
                        @commonLocalizer["Note"]
                    </label>
                    <div class="controls">
                        <input type="text" style="width: 90%;" name="SelectedUnitStatusNote" id="SelectedUnitStatusNote" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn" data-dismiss="modal" aria-hidden="true">
                    @commonLocalizer["Close"]
                </button>
                <button id="savingSelectedUnitStatusButton" type="button" class="btn btn-primary" name="savingSelectedUnitStatusButton">
                    @commonLocalizer["Save"]
                </button>
                <button id="savingSelectedUnitStatusButtonLoader" name="savingSelectedUnitStatusButtonLoader" class="btn btn-primary" type="button" disabled style="display: none;">
                    <div class="sk-spinner sk-spinner-wave" style="height: 20px;">
                        <div class="sk-rect1"></div>
                        <div class="sk-rect2"></div>
                        <div class="sk-rect3"></div>
                    </div>
                </button>
            </div>
        </div>
    </div>
</div>

@{
    void UnitTableButtonTemplate(Unit u, int customState, string stateTextColor, string stateColor, string stateText, UnitState unitStatus)
    {
        var timestamp = DateTime.UtcNow.TimeConverter(Model.Department).FormatForDepartment(Model.Department);
        if (unitStatus != null)
        {
            timestamp = unitStatus.Timestamp.TimeConverter(Model.Department).FormatForDepartment(Model.Department);
        }

        if (Model.IsUserAdminOrGroupAdmin)
        {
            @Html.Raw("<tr><td><input type='checkbox' id='dispatchUnit_" + u.UnitId + "' name='dispatchUnitCheckbox' value='" + u.UnitId + "' data-customState='" + customState + "' /></td><td>" + u.Name + "</td><td>" + u.Type + "</td><td><span class='label' style='color:" + stateTextColor + ";background-color:" + stateColor + ";'>" + stateText + "</span></td><td>" + timestamp + "</td>")
            @Html.Raw($"<td><button class='btn btn-xs btn-primary' data-toggle='modal' data-target='#setUnitStatusModal' data-id='{u.UnitId}' data-customstateid='{customState}'>{@localizer["SetStatus"]}</button></td>")
        }
        else
        {
            @Html.Raw("<tr><td></td><td>" + u.Name + "</td><td>" + u.Type + "</td><td><span class='label' style='color:" + stateTextColor + ";background-color:" + stateColor + ";'>" + stateText + "</span></td><td>" + timestamp + "</td>")
            @Html.Raw("<td></td>")
        }
        
        @Html.Raw("<td>")

        @Html.Raw($"<a type='button' href='{@Url.Action("ViewEvents", "Units", new { area = "User" })}?unitId={u.UnitId}' class='btn btn-xs btn-primary'>{@localizer["ViewEvents"]}</a>&nbsp;<a type='button' href='{@Url.Action("ViewLogs", "Units", new { area = "User" })}?unitId={u.UnitId}' class='btn btn-xs btn-info'>{@localizer["Logs"]}</a>&nbsp;")

        @if (ClaimsAuthorizationHelper.IsUserDepartmentAdmin())
        {
            @Html.Raw($"<a type='button' href='{@Url.Action("EditUnit", "Units", new { area = "User" })}?unitId={u.UnitId}' class='btn btn-xs btn-warning'>{@commonLocalizer["Edit"]}</a>&nbsp;<a type='button' href='{@Url.Action("DeleteUnit", "Units", new { area = "User" })}?unitId={u.UnitId}' class='btn btn-xs btn-danger' data-confirm='{@localizer["DeleteUnitWarning"]} {u.Name}?' rel='nofollow'>{@commonLocalizer["Delete"]}</a>")
        }
    }
}

@section Scripts
    {
    <script>
        var treeData = @Html.Raw(@Model.TreeData);
    </script>

    <script src="~/js/app/internal/units/resgrid.units.index.js" type="text/javascript"></script>
}
